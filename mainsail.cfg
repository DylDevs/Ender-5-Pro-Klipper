# Mainsail klipper definitions

# Notes:
# Add [include mainsail.cfg] to your printer.cfg to include it to your printer.cfg
# Modify x_park, y_park, z_park_delta and extrude value at the macro _TOOLHEAD_PARK_PAUSE_CANCEL if needed
# Use variable_park: False at CANCEL_PRINT to disallow the parking move

[virtual_sdcard]
path: ~/gcode_files # Path for G-Code uploaded in the Mainsail UI
on_error_gcode: 
  CANCEL_PRINT # If an error occurs during a print, cancel it

[pause_resume] # Allow pausing and resuming of prints
[display_status] # Allow Klipper and Mainsail to show progress

[gcode_macro CANCEL_PRINT]
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  # Move head and retract only if not already in the pause state and park set to true
  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}
  TURN_OFF_HEATERS # Stop the extruder and bed heaters
  M106 S0 # Turn off fan
  CANCEL_PRINT_BASE # Call the base cancel macro

[gcode_macro PAUSE]
rename_existing: PAUSE_BASE
gcode:
  PAUSE_BASE # Call the base cancel macro
  _TOOLHEAD_PARK_PAUSE_CANCEL # Park the extruder

[gcode_macro RESUME]
rename_existing: RESUME_BASE
gcode:
  # Get extrusion distance
  {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  # Get velocity
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83 # Use relative positioning for extrusion
    G1 E{extrude} F2100 # Extrude 
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} 
      M82 # Use absolute positioning for extrusion
    {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")} # The printer cannot extrude
  {% endif %}
  RESUME_BASE {get_params} # Call the base resume macro

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
variable_extrude: 1.0
gcode:
    # Set parking position for X and Y, defaults to 5mm from edge
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    {% set z_park_delta = 2.0 %} # Z-lift amount to avoid crashing into print

    # Calculate a safe Z lift
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - z_park_delta) %}
        {% set z_safe = z_park_delta %} # Standard lift if not too close to Z max
    {% else %}
        {% set z_safe = max_z - act_z %} # Adjust lift to avoid exceeding Z max
    {% endif %}

    # Retract filament if extruder is hot
    {% if printer.extruder.can_extrude|lower == 'true' %}
        M83 # Use relative extrusion
        G1 E-{extrude} F2100 # Retract by set amount at 35mm/s
        {% if printer.gcode_move.absolute_extrude |lower == 'true' %}
            M82 # Restore absolute extrusion mode if originally set
        {% endif %}
    {% else %}
        {action_respond_info("Extruder not hot enough")} # Skip retraction if too cold
    {% endif %}

    # Move the toolhead only if printer is homed
    {% if "xyz" in printer.toolhead.homed_axes %}
        G91 # Use relative positioning
        G1 Z{z_safe} F900 # Lift Z axis slowly to avoid hitting objects (15mm/s)
        G90 # Use absolute positioning
        G1 X{x_park} Y{y_park} F6000 # Move extruder to park position at 100mm/s
        {% if printer.gcode_move.absolute_coordinates|lower == 'false' %}
            G91 # Use relative positioning
        {% endif %}
    {% else %}
        {action_respond_info("Printer not homed")} # Don't move if axes aren't homed
    {% endif %}